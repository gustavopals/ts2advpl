import { Component, OnInit, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import hljs from 'highlight.js/lib/core';
import typescript from 'highlight.js/lib/languages/typescript';
import python from 'highlight.js/lib/languages/python';
import css from 'highlight.js/lib/languages/css';
import xml from 'highlight.js/lib/languages/xml';
import { CommonModule } from '@angular/common';
import { ApiService, ConversaoResponse } from './services/api.service';

// Register languages you need
hljs.registerLanguage('typescript', typescript);
hljs.registerLanguage('python', python);
hljs.registerLanguage('css', css);
hljs.registerLanguage('html', xml);
// Registrar AdvPL como uma varia√ß√£o de Pascal/SQL
hljs.registerLanguage('advpl', () => ({
  case_insensitive: true,
  keywords: {
    keyword: 'User Function EndUser Local Static Private Public Return If Else ElseIf EndIf For To Next While EndWhile Do Case EndCase Exit Loop DbUseArea DbCloseArea DbSelectArea DbGoTop DbSkip DbSeek RecLock DbCommit DbRollback',
    built_in: 'Len Empty Val Str Transform PadL PadR SubStr At AllTrim LTrim RTrim Upper Lower cValToChar',
    literal: 'true false nil'
  },
  contains: [
    hljs.COMMENT('//', '$'),
    hljs.COMMENT('/\\*', '\\*/'),
    hljs.QUOTE_STRING_MODE,
    hljs.NUMBER_MODE
  ]
}));

interface Message {
  sender: 'user' | 'bot';
  text: string;
  code?: string;
  language?: 'typescript' | 'advpl' | 'python' | 'html' | 'css';
  isError?: boolean;
  metadata?: {
    modelo?: string;
    tokens?: number;
    tempo?: number;
    caracteres?: number;
  };
}

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.scss'],
  standalone: true,
  imports: [
    FormsModule,
    CommonModule,
    HttpClientModule
  ]
})
export class ChatbotComponent implements OnInit, AfterViewChecked {

  @ViewChild('scrollMe') private myScrollContainer!: ElementRef;

  messages: Message[] = [];
  newMessage: string = '';
  isLoading: boolean = false;
  
  // Flag para controlar o highlight
  private needsHighlighting = false;

  constructor(private apiService: ApiService) {}

  ngOnInit(): void {
    this.messages.push({
      sender: 'bot',
      text: 'Ol√°! Sou o TS2AdvPL Converter! üöÄ<br><br>Envie seu c√≥digo TypeScript e eu convertirei para AdvPL (linguagem do ERP Protheus/TOTVS).<br><br>üìù <strong>Exemplo:</strong><br>Digite: <code>function soma(a: number, b: number) { return a + b; }</code>'
    });
  }

  ngAfterViewChecked(): void {
    // MUDAN√áA: O c√≥digo de highlight agora s√≥ roda se a flag for verdadeira
    if (this.needsHighlighting) {
      document.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block as HTMLElement);
      });
      // Desarmamos a flag para n√£o rodar de novo desnecessariamente
      this.needsHighlighting = false;
    }
    this.scrollToBottom();
  }

  sendMessage(event: Event): void {
    event.preventDefault();
    if (this.newMessage.trim() === '') {
      return;
    }

    const userMessage = this.newMessage.trim();
    this.messages.push({ sender: 'user', text: userMessage });
    this.newMessage = '';
    this.isLoading = true;
    this.scrollToBottom();

    // Verificar se parece ser c√≥digo TypeScript
    if (this.isTypeScriptCode(userMessage)) {
      this.convertCode(userMessage);
    } else {
      this.handleGeneralMessage(userMessage);
    }
  }

  private isTypeScriptCode(text: string): boolean {
    // Verifica se o texto parece ser c√≥digo TypeScript
    const codeIndicators = [
      'function',
      'const',
      'let',
      'var',
      'class',
      '=>',
      'interface',
      'type',
      'import',
      'export'
    ];
    
    return codeIndicators.some(indicator => text.includes(indicator));
  }

  private convertCode(codigoTs: string): void {
    this.apiService.converter(codigoTs).subscribe({
      next: (response: ConversaoResponse) => {
        const botMessage: Message = {
          sender: 'bot',
          text: this.formatConversaoResponse(response.data.resultado),
          metadata: response.data.metadata
        };
        
        this.messages.push(botMessage);
        this.needsHighlighting = true;
        this.isLoading = false;
      },
      error: (error) => {
        const errorMessage: Message = {
          sender: 'bot',
          text: `‚ùå <strong>Erro na convers√£o:</strong><br>${error.error?.error || error.message || 'Erro desconhecido'}`,
          isError: true
        };
        
        this.messages.push(errorMessage);
        this.isLoading = false;
      }
    });
  }

  private handleGeneralMessage(message: string): void {
    setTimeout(() => {
      const response: Message = {
        sender: 'bot',
        text: `Entendi! Para converter c√≥digo TypeScript para AdvPL, por favor envie o c√≥digo diretamente.<br><br>üìù <strong>Exemplos que posso converter:</strong><br>‚Ä¢ Fun√ß√µes<br>‚Ä¢ Classes<br>‚Ä¢ Interfaces<br>‚Ä¢ Loops e condicionais<br>‚Ä¢ Opera√ß√µes matem√°ticas<br><br>üí° <strong>Dica:</strong> Cole seu c√≥digo TypeScript e eu farei a convers√£o automaticamente!`
      };
      
      this.messages.push(response);
      this.isLoading = false;
    }, 1000);
  }

  private formatConversaoResponse(resultado: string): string {
    // Processa o resultado da convers√£o para extrair e formatar o c√≥digo AdvPL
    const lines = resultado.split('\n');
    let formattedResponse = '';
    let inCodeBlock = false;
    let codeContent = '';
    
    for (const line of lines) {
      if (line.includes('```advpl') || line.includes('```')) {
        if (inCodeBlock) {
          // Fim do bloco de c√≥digo
          formattedResponse += `<div class="code-block-container"><pre><code class="language-advpl">${codeContent.trim()}</code></pre></div>`;
          codeContent = '';
          inCodeBlock = false;
        } else {
          // In√≠cio do bloco de c√≥digo
          inCodeBlock = true;
        }
      } else if (inCodeBlock) {
        codeContent += line + '\n';
      } else {
        // Texto normal - formatar markdown b√°sico
        let formattedLine = line
          .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
          .replace(/\*(.+?)\*/g, '<em>$1</em>')
          .replace(/‚ö†Ô∏è/g, '‚ö†Ô∏è')
          .replace(/‚úÖ/g, '‚úÖ');
        
        if (formattedLine.trim()) {
          formattedResponse += formattedLine + '<br>';
        }
      }
    }
    
    // Se ainda h√° c√≥digo pendente
    if (codeContent.trim()) {
      formattedResponse += `<div class="code-block-container"><pre><code class="language-advpl">${codeContent.trim()}</code></pre></div>`;
    }
    
    return formattedResponse;
  }

  private scrollToBottom(): void {
    try {
      this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight;
    } catch (err) { }
  }
}